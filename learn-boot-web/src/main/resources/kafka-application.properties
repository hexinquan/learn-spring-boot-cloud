# APACHE KAFKA (KafkaProperties)
# ID to pass to the server when making requests. Used for server-side logging.
spring.kafka.admin.client-id= 192.168.1.1
# Whether to fail fast if the broker is not available on startup.
spring.kafka.admin.fail-fast=false
# Additional admin-specific properties used to configure the client.
spring.kafka.admin.properties.*=
# Password of the private key in the key store file.
spring.kafka.admin.ssl.key-password=
# Location of the key store file.
spring.kafka.admin.ssl.key-store-location=
# Store password for the key store file.
spring.kafka.admin.ssl.key-store-password=
# Type of the key store.
spring.kafka.admin.ssl.key-store-type=
# SSL protocol to use.
spring.kafka.admin.ssl.protocol=
# Location of the trust store file.
spring.kafka.admin.ssl.trust-store-location=
# Store password for the trust store file.
spring.kafka.admin.ssl.trust-store-password=
# Type of the trust store.
spring.kafka.admin.ssl.trust-store-type=
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.
spring.kafka.bootstrap-servers=
# ID to pass to the server when making requests. Used for server-side logging.
spring.kafka.client-id=
# Frequency with which the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' is set to true.
spring.kafka.consumer.auto-commit-interval=
# What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.
spring.kafka.consumer.auto-offset-reset=
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.
spring.kafka.consumer.bootstrap-servers=
# ID to pass to the server when making requests. Used for server-side logging.
spring.kafka.consumer.client-id=
# Whether the consumer's offset is periodically committed in the background.
spring.kafka.consumer.enable-auto-commit=
# Maximum amount of time the server blocks before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch-min-size".
spring.kafka.consumer.fetch-max-wait=
# Minimum amount of data the server should return for a fetch request.
spring.kafka.consumer.fetch-min-size=
# Unique string that identifies the consumer group to which this consumer belongs.
spring.kafka.consumer.group-id=
# Expected time between heartbeats to the consumer coordinator.
spring.kafka.consumer.heartbeat-interval=
# Deserializer class for keys.
spring.kafka.consumer.key-deserializer=
# Maximum number of records returned in a single call to poll().
spring.kafka.consumer.max-poll-records=
# Additional consumer-specific properties used to configure the client.
spring.kafka.consumer.properties.*=
# Password of the private key in the key store file.
spring.kafka.consumer.ssl.key-password=
# Location of the key store file.
spring.kafka.consumer.ssl.key-store-location=
# Store password for the key store file.
spring.kafka.consumer.ssl.key-store-password=
# Type of the key store.
spring.kafka.consumer.ssl.key-store-type=
# SSL protocol to use.
spring.kafka.consumer.ssl.protocol=
# Location of the trust store file.
spring.kafka.consumer.ssl.trust-store-location=
# Store password for the trust store file.
spring.kafka.consumer.ssl.trust-store-password=
# Type of the trust store.
spring.kafka.consumer.ssl.trust-store-type=
# Deserializer class for values.
spring.kafka.consumer.value-deserializer=
# Control flag for login configuration.
spring.kafka.jaas.control-flag=required 
# Whether to enable JAAS configuration.
spring.kafka.jaas.enabled=false
# Login module.
spring.kafka.jaas.login-module=com.sun.security.auth.module.Krb5LoginModule 
# Additional JAAS options.
spring.kafka.jaas.options=
# Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".
spring.kafka.listener.ack-count=
# Listener AckMode. See the spring-kafka documentation.
spring.kafka.listener.ack-mode=
# Time between offset commits when ackMode is "TIME" or "COUNT_TIME".
spring.kafka.listener.ack-time=
# Prefix for the listener's consumer client.id property.
spring.kafka.listener.client-id=
# Number of threads to run in the listener containers.
spring.kafka.listener.concurrency=
# Time between publishing idle consumer events (no data received).
spring.kafka.listener.idle-event-interval=
# Whether to log the container configuration during initialization (INFO level).
spring.kafka.listener.log-container-config=
# Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.
spring.kafka.listener.monitor-interval=
# Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive.
spring.kafka.listener.no-poll-threshold=
# Timeout to use when polling the consumer.
spring.kafka.listener.poll-timeout=
# Listener type.
spring.kafka.listener.type=single 
# Number of acknowledgments the producer requires the leader to have received before considering a request complete.
spring.kafka.producer.acks=
# Default batch size.
spring.kafka.producer.batch-size=
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.
spring.kafka.producer.bootstrap-servers=
# Total memory size the producer can use to buffer records waiting to be sent to the server.
spring.kafka.producer.buffer-memory=
# ID to pass to the server when making requests. Used for server-side logging.
spring.kafka.producer.client-id=
# Compression type for all data generated by the producer.
spring.kafka.producer.compression-type=
# Serializer class for keys.
spring.kafka.producer.key-serializer=
# Additional producer-specific properties used to configure the client.
spring.kafka.producer.properties.*=
# When greater than zero, enables retrying of failed sends.
spring.kafka.producer.retries=
# Password of the private key in the key store file.
spring.kafka.producer.ssl.key-password=
# Location of the key store file.
spring.kafka.producer.ssl.key-store-location=
# Store password for the key store file.
spring.kafka.producer.ssl.key-store-password=
# Type of the key store.
spring.kafka.producer.ssl.key-store-type=
# SSL protocol to use.
spring.kafka.producer.ssl.protocol=
# Location of the trust store file.
spring.kafka.producer.ssl.trust-store-location=
# Store password for the trust store file.
spring.kafka.producer.ssl.trust-store-password=
# Type of the trust store.
spring.kafka.producer.ssl.trust-store-type=
# When non empty, enables transaction support for producer.
spring.kafka.producer.transaction-id-prefix=
# Serializer class for values.
spring.kafka.producer.value-serializer=
# Additional properties, common to producers and consumers, used to configure the client.
spring.kafka.properties.*=
# Password of the private key in the key store file.
spring.kafka.ssl.key-password=
# Location of the key store file.
spring.kafka.ssl.key-store-location=
# Store password for the key store file.
spring.kafka.ssl.key-store-password=
# Type of the key store.
spring.kafka.ssl.key-store-type=
# SSL protocol to use.
spring.kafka.ssl.protocol=
# Location of the trust store file.
spring.kafka.ssl.trust-store-location=
# Store password for the trust store file.
spring.kafka.ssl.trust-store-password=
# Type of the trust store.
spring.kafka.ssl.trust-store-type=
# Kafka streams application.id property; default spring.application.name.
spring.kafka.streams.application-id=
# Whether or not to auto-start the streams factory bean.
spring.kafka.streams.auto-startup=true 
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for streams.
spring.kafka.streams.bootstrap-servers=
# Maximum memory size to be used for buffering across all threads.
spring.kafka.streams.cache-max-size-buffering=
# ID to pass to the server when making requests. Used for server-side logging.
spring.kafka.streams.client-id=
# Additional Kafka properties used to configure the streams.
spring.kafka.streams.properties.*=
# The replication factor for change log topics and repartition topics created by the stream processing application.
spring.kafka.streams.replication-factor=
# Password of the private key in the key store file.
spring.kafka.streams.ssl.key-password=
# Location of the key store file.
spring.kafka.streams.ssl.key-store-location=
# Store password for the key store file.
spring.kafka.streams.ssl.key-store-password=
# Type of the key store.
spring.kafka.streams.ssl.key-store-type=
# SSL protocol to use.
spring.kafka.streams.ssl.protocol=
# Location of the trust store file.
spring.kafka.streams.ssl.trust-store-location=
# Store password for the trust store file.
spring.kafka.streams.ssl.trust-store-password=
# Type of the trust store.
spring.kafka.streams.ssl.trust-store-type=
# Directory location for the state store.
spring.kafka.streams.state-dir=
# Default topic to which messages are sent.
spring.kafka.template.default-topic=